// Cutting Room Floor

const OLD_PROPERTY_NAME ="OLD_PROPERTY_NAME_HERE";
const NEW_PROPERTY_NAME ="NEW_PROPERTY_NAME_HERE";

// refactor into a UpdateObject
const oldExpressionInput = "expression1";
const newExpressionInput = "expression2";
const oldExpressionLabel = "label1";
const newExpressionLabel = "label2";


/**
 * @warning be careful with global string replacement
 * @param {string | number} reportId 
 */
async function stringReplaceFormulaFieldOfReport(reportId) {
    try {
        let reportData = await getReportById(reportId); 
        const reportString = JSON.stringify(reportData);
        const updatedString = reportString
        reportData = JSON.parse(updatedString);
        await setReportById(reportId, reportData);
    } catch (error) {
        console.error(`Error in stringReplaceFormulaFieldOfReport(reportId: ${reportId}):`, error);
    }
}

// 
/**
 * safer way to modify stuff
 * @TODO refactor + add types
 */
async function updateFormulaFieldOfReport(reportId) {
    try {
        let modified = false;
        let reportData = await getReportById(reportId);
        let expressionAlias = null;
        reportData.reportDefinition.expressions.forEach(expression => {
            if (expression && expression.input && (expression.input.replace(/\s/g, '') === oldExpressionInput.replace(/\s/g, '') || expression.input.replace(/\s/g, '') === newExpressionInput.replace(/\s/g, ''))) {
                if (expression.expression.right.type === "PROPERTY") {
                    expression.input = newExpressionInput;
                    expression.label = newExpressionLabel;
                    expression.expression.right.name = NEW_PROPERTY_NAME;
                } else if (expression.expression.right.type === "FUNCTION_CALL") {
                    expression.input.replace(oldExpressionLabel, newExpressionLabel);
                }
                expressionAlias = expression.alias;
                return;
            }
        });
        if (expressionAlias) {
            // Update columns that reference the expression alias
            let columns = reportData.reportDefinition.columns;
            Object.keys(columns).forEach(key => {
                let col = columns[key];
                if (col.field && col.field.source === "EXPRESSION" && col.field.name === expressionAlias) {
                    if (col.field.expression && col.field.expression.right && col.field.expression.right.name === OLD_PROPERTY_NAME) {
                        col.field.expression.right.name = NEW_PROPERTY_NAME;
                        modified = true;
                    }
                }
            });
            if (reportData.reportDefinition.filtering && reportData.reportDefinition.filtering.groups) {
                reportData.reportDefinition.filtering.groups.forEach(group => {
                    if (group.filters && Array.isArray(group.filters)) {
                        group.filters.forEach(filter => {
                            if (filter.field && filter.field.source === "EXPRESSION" && filter.field.name === expressionAlias) {
                                if (filter.field.expression && filter.field.expression.right && filter.field.expression.right.name === OLD_PROPERTY_NAME) {
                                    filter.field.expression.right.name = NEW_PROPERTY_NAME;
                                    modified = true;
                                }
                            }
                        });
                    }
                });
            }
        }

        if (modified && reportData) {
            console.log(`Updating Expression in Report Name: ${reportData.name}`);
            let updateRes = await setReportById(reportId, reportData);
            console.log('Report Updated:', updateRes);
            console.log(`Report ${reportId} updated:`, updateRes);
        } else {
            console.log(`No matching expression found for report ${reportId}`);
        }
    } catch (error) {
        console.error(`Error in updateFormulaFieldOfReport(reportId: ${reportId}):`, error);
    }
}

/**
 * 
 * @param {string | number} dashboardId 
 * @param {Record<string, string>} replaceDict 
 * @returns 
 */
async function updateAllOccurrencesOfStringInDashboard(dashboardId, replaceDict) {
    try {
        let dashboardData = await getDashboardById(dashboardId);
        const dashboardString = JSON.stringify(dashboardData);
        let updatedString = dashboardString;
        for ([key, value] of Object.entries(replaceDict)) {
            updatedString = updatedString.replace(new RegExp(key, 'g'), value);
        }
        dashboardData = JSON.parse(updatedString);
        let updateRes = await setDashboardById(dashboardId, dashboardData);
        return updateRes;
    } catch (error) {
        console.error(`Error in updateAllOccurrencesOfStringInDashboard(dashboardId: ${dashboardId}):`, error);
    }
}


/**
 * 
 * @param {object.<string, any>} obj 
 * @param {Array<{"newTerm": string, "oldTerm" : string}>} replacements 
 * @returns 
 */
function recursiveReplace(obj, replacements) {
    if (typeof obj === "string") {
        let newStr = obj;
        replacements.forEach(r => {
            newStr = newStr.split(r.oldTerm).join(r.newTerm);
        });
        return newStr;
    } else if (Array.isArray(obj)) {
        return obj.map(item => recursiveReplace(item, replacements));
    } else if (typeof obj === "object" && obj !== null) {
        Object.keys(obj).forEach(key => {
            obj[key] = recursiveReplace(obj[key], replacements);
        });
        return obj;
    }
    return obj;
}


/**
 * 
 * @param {string | number} objectId 
 * @param {ObjectTypeEnum} objectType
 * @param {Record<string, string>} replaceDict key is the string {@link RegExp} pattern to match, value is the string to replace with.
 * @returns {Promise<object.<string, any>>}
 */
async function replaceAllOccurrencesOfStringInObject(objectId, objectType, replaceDict) {
    console.log(`replaceAllOccurrencesOfStringInObject(objectId: ${objectId}, objectType: ${objectType}, replaceDict: ${JSON.stringify(replaceDict)})`);
    if (!objectId || !objectType || !replaceDict) {
        throw new Error("objectId and objectType and replaceDict are required parameters.");
    }
    try {
        let data = await getObjectById(objectId, objectType);
        if (!data || data === undefined) {
            console.log('data is undefined or null', data);
            throw new Error(`No data found for objectId: ${objectId} and objectType: ${objectType}`);
        }
        // console.log('\t data.hasOwnProperty("name")', data.hasOwnProperty("name"));
        // console.log('\t Object.keys(data)', Object.keys(data));
        let updatedString = JSON.stringify(data);
        for ([key, value] of Object.entries(replaceDict)) {
            let regExp = new RegExp(key, 'g');
            if (!regExp.test(updatedString)) {
                console.log(`\tNo match found for RegExp ${regExp} in objectId: ${objectId} and objectType: ${objectType}`);
                continue;
            }
            console.log(`\tAttempting to replace RegExp ${regExp} with ${value}`);
            updatedString = updatedString.replace(regExp, value);
            console.log(`\t\t regExp.test(updatedString) after replace:      ${regExp.test(updatedString)}`);
            console.log(`\t\t updatedString.includes(${value}) afer replace: ${updatedString.includes(value)}`);
        }
        console.log('\t\t JSON.parse(updatedString).hasOwnProperty("name")', JSON.parse(updatedString).hasOwnProperty("name"));
        return await setObjectById(objectId, objectType, JSON.parse(updatedString));
    } catch (error) {
        console.error(`Error in replaceAllOccurrencesOfStringInObject(objectId: ${objectId}, objectType: ${objectType}):`, error);
    }
}

/**
 * 
 * @param {string | number} dashboardId 
 * @param {boolean} useReplaceMethod 
 * @param {Record<string, string>} replaceDict key is the {@link RegExp} pattern to match, value is the string to replace with.
 * @returns {Promise<{status: number, message: string}>}
 */
async function updateAllOccurrencesofStringInDashboardReports(
    dashboardId, 
    useReplaceMethod=true, 
    replaceDict={}
) {
    let dashboardData = await getDashboardById(dashboardId);
    // Loop over each widget that contains a report
    try {
        let i = 0;
        for (let widget of dashboardData.widgets) {
            console.log(`Widget ${i++}.`);
            if (!widget.reportId) {
                continue;
            }
            let reportId = widget.reportId;
            let widgetRes = undefined
            if (useReplaceMethod) {
                widgetRes = await replaceAllOccurrencesOfStringInObject(reportId, ObjectTypeEnum.REPORT, replaceDict);
            } else {
                widgetRes = await updateFormulaFieldOfReport(reportId);
            }
            if (widgetRes) {
                console.log(`\t Updated report ${reportId} in dashboard ${dashboardId}`);
            } else {
                console.log(`\t Failed to update report ${reportId} in dashboard ${dashboardId}`);
            }
        }
        return { status: 200, message: `Finished updateAllOccurrencesofStringInDashboardReports(dashboardId: ${dashboardId})` };
    } catch (error) {
        console.error(`Error in updateAllOccurrencesofStringInDashboardReports(dashboardId: ${dashboardId}):`, error);
        return { status: 500, message: `Failed updateAllOccurrencesofStringInDashboardReports(dashboardId: ${dashboardId})` };
    }
}